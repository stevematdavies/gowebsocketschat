<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
    <!-- JavaScript Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
    <script src="/static/reconnecting-websocket.min.js"></script>
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
        .online-user {
            color: green;
        }
    </style>
    <title>Home</title>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3">This is the Homepage</h1>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-md-8">
                <h3>Chat</h3>

                <div class="form-group">
                    <label for="username">Username: </label>
                    <input type="text" class="form-control" name="username" id="username" autocomplete="off" required>
                </div>

                <div class="form-group">
                    <label for="message">Message: </label>
                    <input type="text" class="form-control" name="message" id="message" autocomplete="off" required>
                </div>

                <hr>

                <button class="btn btn-outline-secondary" id="send-btn">Send Message</button>

                <input type="hidden" id="action" name="action">

                <div id="status" class="mt-2 float-end">

                </div>

                <div id="chatbox" class="chatbox mt-4"></div>

                <div class="mt-4 alert alert-danger" id="error-output" role="alert" hidden></div>
            </div>

            <div class="col-md-4">
                <h3>Who's Online?</h3>
                <ul id="online-users" class="online-user"></ul>
            </div>
        </div>
    </div>


    <script>
        let socket = null;
        const userInput = document.getElementById("username");
        const messageInput = document.getElementById("message")
        const sendMessageBtn = document.getElementById("send-btn")
        const chatbox = document.getElementById("chatbox")
        const errorBox = document.getElementById("error-output")
        const connectedUserList = document.getElementById("online-users")
        const serverStatus = document.getElementById("status")


        sendMessageBtn.disabled = true
        const offline = ``


        window.onbeforeunload = () => {
            console.log('Leaving');
            socket.send(JSON.stringify({
                action: "left"
            }))
        }

        document.addEventListener('DOMContentLoaded', () => {
            socket = new ReconnectingWebSocket(
                "ws://127.0.0.1:8080/ws",
                null,
                {
                    debug: true,
                    reconnectInterval: 3000,
                }

            );




            socket.onopen = () => {
                console.log('Successfully connected');
                serverStatus.innerHTML = '<span class="badge bg-success">Connected</span>'
            }

            socket.onclose = () => {
                console.log('Successfully closed connection');
                serverStatus.innerHTML = '<span class="badge bg-danger">Not Connected</span>'
            }

            socket.onerror = (err) => {
                console.log('There was an error: ', err);
                serverStatus.innerHTML = '<span class="badge bg-warning">Not Connected</span>'
            }

            socket.onmessage = (msg) => {

                let data = JSON.parse(msg.data)
                if (data.action){
                    switch (data.action){
                        case 'list_users': {
                            while (connectedUserList.firstChild) connectedUserList.removeChild(connectedUserList.firstChild);
                            if(data.connectedUsers.length > 0) {
                                data.connectedUsers.forEach(cu => {
                                     let li = document.createElement('li');
                                     li.appendChild(document.createTextNode(cu.username));
                                     li.style['color'] = cu.userColor
                                     connectedUserList.appendChild(li)
                                })
                            }
                        } break;

                        case "broadcast":
                            chatbox.innerHTML = chatbox.innerHTML + data.message + "<br>";
                            break;
                        default:
                            return
                    }
               }

            }

            userInput.addEventListener("change", function(){
                socket.send(JSON.stringify({
                    action: "username",
                    username: this.value
                }));
            })

            messageInput.addEventListener('keyup', function(evt){
                if (evt.code !== "Tab") {
                    if (this.value) {
                        sendMessageBtn.disabled = false;
                        errorBox.hidden = true;
                    } else {
                        errorBox.innerHTML = 'Please add a message!'
                        errorBox.hidden = false;
                    }
                }
                errorBox.hidden = true
            })

            messageInput.addEventListener('keydown', evt => {
                if (evt.code === "Enter"){
                    if (!socket){
                        console.error("No connection!")
                        return false;
                    }
                    evt.preventDefault();
                    evt.stopPropagation();
                    sendMessage();
                }
            })

            sendMessageBtn.addEventListener('click', sendMessage)

        });

        const sendMessage = () => {
            let message = messageInput.value
            let username = userInput.value
            if (message && username) {
                socket.send(JSON.stringify({
                    action: 'broadcast',
                    username,
                    message

                }))
            }
            messageInput.value = ""
            sendMessageBtn.disabled = true
            errorBox.hidden = true;


        }
    </script>
</body>
</html>